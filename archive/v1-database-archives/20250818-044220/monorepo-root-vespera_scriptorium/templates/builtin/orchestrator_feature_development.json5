// JSON5 Template File
// Generated by Vespera Scriptorium
// Template ID: orchestrator_feature_development
// Created: 2025-08-16T00:31:37.034508

{
  "metadata": {
    "name": "Orchestrator Feature Development",
    "version": "1.0.0",
    "description": "Template for developing new features in the Task Orchestrator system",
    "category": "self-development",
    "tags": [
      "orchestrator",
      "feature",
      "development",
      "clean-architecture"
    ],
    "author": "Task Orchestrator",
    "complexity": "complex",
    "estimated_duration": "1-4 weeks"
  },
  "parameters": {
    "feature_name": {
      "type": "string",
      "description": "Name of the orchestrator feature",
      "required": true,
      "min_length": 3,
      "max_length": 100
    },
    "feature_type": {
      "type": "string",
      "description": "Type of feature being developed",
      "required": true,
      "enum": [
        "domain-entity",
        "use-case",
        "infrastructure",
        "mcp-tool",
        "integration",
        "optimization"
      ]
    },
    "architecture_layer": {
      "type": "string",
      "description": "Primary architecture layer for this feature",
      "required": true,
      "enum": [
        "domain",
        "application",
        "infrastructure",
        "presentation"
      ]
    },
    "breaking_change": {
      "type": "boolean",
      "description": "Whether this feature introduces breaking changes",
      "required": false,
      "default": false
    }
  },
  "tasks": {
    "architecture_analysis": {
      "title": "Analyze Clean Architecture Impact",
      "description": "Analyze how {{feature_name}} fits into the clean architecture design",
      "type": "design",
      "specialist_type": "architect",
      "complexity": "complex",
      "estimated_effort": "4-8 hours",
      "checklist": [
        "Review current architecture and identify integration points",
        "Design domain entities and value objects",
        "Define use cases and business logic",
        "Plan infrastructure implementations",
        "Identify dependency injection requirements",
        "Design interface contracts and abstractions"
      ]
    },
    "domain_implementation": {
      "title": "Implement Domain Layer Components",
      "description": "Implement domain entities, value objects, and business logic for {{feature_name}}",
      "type": "implementation",
      "specialist_type": "coder",
      "complexity": "complex",
      "estimated_effort": "1-2 weeks",
      "dependencies": [
        "architecture_analysis"
      ],
      "checklist": [
        "Create domain entities with business invariants",
        "Implement value objects and domain services",
        "Define repository interfaces",
        "Implement domain exceptions with recovery strategies",
        "Add domain events for integration",
        "Create domain validation logic"
      ]
    },
    "application_layer": {
      "title": "Implement Application Use Cases",
      "description": "Create application layer use cases and DTOs for {{feature_name}}",
      "type": "implementation",
      "specialist_type": "coder",
      "complexity": "moderate",
      "estimated_effort": "3-5 days",
      "dependencies": [
        "domain_implementation"
      ],
      "checklist": [
        "Implement use case classes with business workflows",
        "Create request/response DTOs",
        "Add application service interfaces",
        "Implement cross-cutting concerns (logging, validation)",
        "Add error handling and transaction management",
        "Create integration event publishers"
      ]
    },
    "infrastructure_implementation": {
      "title": "Implement Infrastructure Layer",
      "description": "Create infrastructure implementations for {{feature_name}}",
      "type": "implementation",
      "specialist_type": "coder",
      "complexity": "complex",
      "estimated_effort": "1 week",
      "dependencies": [
        "application_layer"
      ],
      "checklist": [
        "Implement repository patterns with SQLite",
        "Create database migrations and schema updates",
        "Add configuration management",
        "Implement external service adapters",
        "Add monitoring and health checks",
        "Create dependency injection bindings"
      ]
    },
    "mcp_integration": {
      "title": "Create MCP Tool Integration",
      "description": "Implement MCP tools and server integration for {{feature_name}}",
      "type": "implementation",
      "specialist_type": "coder",
      "complexity": "moderate",
      "estimated_effort": "2-3 days",
      "dependencies": [
        "infrastructure_implementation"
      ],
      "checklist": [
        "Design MCP tool interfaces and schemas",
        "Implement MCP request handlers",
        "Add error handling and validation",
        "Create tool documentation and examples",
        "Integrate with existing MCP server",
        "Add security controls and rate limiting"
      ]
    },
    "testing_suite": {
      "title": "Implement Comprehensive Test Suite",
      "description": "Create thorough tests for all layers of {{feature_name}}",
      "type": "testing",
      "specialist_type": "tester",
      "complexity": "complex",
      "estimated_effort": "1 week",
      "dependencies": [
        "mcp_integration"
      ],
      "checklist": [
        "Write unit tests for domain logic",
        "Create application layer integration tests",
        "Implement infrastructure tests with test doubles",
        "Add MCP tool integration tests",
        "Create end-to-end workflow tests",
        "Add performance and load tests"
      ]
    },
    "documentation_update": {
      "title": "Update System Documentation",
      "description": "Update architecture and user documentation for {{feature_name}}",
      "type": "documentation",
      "specialist_type": "documenter",
      "complexity": "moderate",
      "estimated_effort": "2-3 days",
      "dependencies": [
        "testing_suite"
      ],
      "checklist": [
        "Update CLAUDE.md with new features",
        "Document MCP tool usage and examples",
        "Update architecture documentation",
        "Create migration guides if needed",
        "Update API reference documentation",
        "Create user guides and tutorials"
      ]
    }
  },
  "milestones": {
    "architecture_complete": {
      "title": "Architecture Design Complete",
      "description": "Clean architecture design finalized and domain layer implemented",
      "required_tasks": [
        "architecture_analysis",
        "domain_implementation"
      ]
    },
    "core_implementation_complete": {
      "title": "Core Implementation Complete",
      "description": "Application and infrastructure layers fully implemented",
      "required_tasks": [
        "application_layer",
        "infrastructure_implementation"
      ]
    },
    "feature_ready": {
      "title": "Feature Ready for Production",
      "description": "Feature is fully tested, documented, and ready for deployment",
      "required_tasks": [
        "mcp_integration",
        "testing_suite",
        "documentation_update"
      ]
    }
  },
  "_storage": {
    "template_id": "orchestrator_feature_development",
    "category": "builtin",
    "stored_at": "2025-08-16T00:31:37.034508",
    "storage_version": "1.0",
    "storage_uuid": "151a04a1-a08b-470e-b4a4-0bbdf5bb9728"
  }
}
