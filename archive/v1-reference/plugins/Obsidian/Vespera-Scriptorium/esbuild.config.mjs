import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copyFileSync, mkdirSync, rmSync } from "fs";
import svg from "esbuild-plugin-svg";

// Clean dist before build
try {
  rmSync("dist", { recursive: true, force: true });
  rmSync("E:/My Work/Writing/Obsidian Projects/Test Project/.obsidian/Plugins/Vespera-Scriptorium", { recursive: true, force: true });
} catch (e) {}

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");
const outdir = "dist/Vespera-Scriptorium";
const testdir = "E:/My Work/Writing/Obsidian Projects/Test Project/.obsidian/Plugins/Vespera-Scriptorium";

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: `${outdir}/main.js`,
  minify: prod,
  plugins: [
    svg(),
  ],
});

function copyAssetsInternal() {
  mkdirSync(outdir, { recursive: true });
  copyFileSync("manifest.json", `${outdir}/manifest.json`);

  // Create the src/ui directory structure in the output directory
  const uiDir = `${outdir}/src/ui`;
  mkdirSync(uiDir, { recursive: true });

  // Copy the css files to maintain the same path structure
  copyFileSync("styles.css", `${uiDir}/styles.css`);
  copyFileSync("src/ui/robust-processing.css", `${uiDir}/robust-processing.css`);
}

function copyAssetsExternal() {
  mkdirSync(testdir, { recursive: true });
  copyFileSync(`${outdir}/main.js`, `${testdir}/main.js`);
  copyFileSync("manifest.json", `${testdir}/manifest.json`);

  // Create the src/ui directory structure in the output directory
  const uiDir = `${testdir}/src/ui`;
  mkdirSync(uiDir, { recursive: true });

  // Copy the css files to maintain the same path structure
  copyFileSync("styles.css", `${uiDir}/styles.css`);
  copyFileSync("src/ui/robust-processing.css", `${uiDir}/robust-processing.css`);
}

if (prod) {
  await context.rebuild();
  copyAssetsInternal();
  copyAssetsExternal();
  process.exit(0);
} else {
  context.watch({
    onEnd(err, result) {
      if (err) {
        console.error('watch build failed:', err);
      } else {
        console.log('watch build finished.');
        copyAssetsInternal();
        copyAssetsExternal()
      }
    },
  });
}
