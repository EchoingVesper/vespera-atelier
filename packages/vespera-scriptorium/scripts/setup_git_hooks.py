#!/usr/bin/env python3
"""
Setup Git hooks for documentation quality automation.
Installs pre-commit hooks to run quality checks before commits.
"""

import os
import stat
import subprocess
from pathlib import Path


def create_pre_commit_hook():
    """Create a pre-commit hook for documentation quality."""
    
    hook_content = '''#!/bin/bash
# Pre-commit hook for documentation quality
# Auto-generated by setup_git_hooks.py

echo "üîç Running documentation quality checks..."

# Check if we're committing any markdown files
changed_md_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E "\\.md$" || true)

if [ -z "$changed_md_files" ]; then
    echo "‚úÖ No markdown files changed, skipping documentation checks"
    exit 0
fi

echo "üìù Found markdown changes, running quality gates..."

# Run markdownlint on staged files
if command -v markdownlint >/dev/null 2>&1; then
    echo "Running markdownlint..."
    if ! markdownlint --config .markdownlint.json $changed_md_files; then
        echo "‚ùå markdownlint failed. Auto-fixing common issues..."
        python scripts/fix_markdown_lint.py
        
        # Re-stage the fixed files
        git add $changed_md_files
        echo "‚úÖ Auto-fixed markdown issues and re-staged files"
    fi
else
    echo "‚ö†Ô∏è  markdownlint not found. Install with: npm install -g markdownlint-cli"
fi

# Run Vale on staged files if available
if command -v vale >/dev/null 2>&1; then
    echo "Running Vale prose linting..."
    if ! vale $changed_md_files; then
        echo "‚ö†Ô∏è  Vale found style issues. Consider addressing them."
        # Don't fail the commit for Vale issues
    fi
else
    echo "üí° Vale not found. Install from: https://vale.sh/docs/vale-cli/installation/"
fi

# Quick hyperlink check
echo "Running quick hyperlink validation..."
python -c "
import re
import sys

files = '$changed_md_files'.split()
issues = []

for file in files:
    if not file.strip():
        continue
    try:
        with open(file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Check for obvious broken relative links
        relative_links = re.findall(r'\\[([^\\]]+)\\]\\(([^)]+)\\)', content)
        for link_text, link_url in relative_links:
            if link_url.startswith(('http://', 'https://', '#')):
                continue
            if not link_url or link_url == '#':
                continue
            # Basic check for file existence
            import os
            if link_url.startswith('/'):
                target = link_url.lstrip('/')
            else:
                target = os.path.join(os.path.dirname(file), link_url)
            if not os.path.exists(target):
                issues.append(f'{file}: Broken link to {link_url}')
    except Exception as e:
        issues.append(f'{file}: Error checking links - {e}')

if issues:
    print('‚ö†Ô∏è  Found potential link issues:')
    for issue in issues[:5]:  # Show first 5 issues
        print(f'  - {issue}')
    if len(issues) > 5:
        print(f'  ... and {len(issues) - 5} more')
    print('üí° Consider running: python scripts/quality_automation.py --check links')
else:
    print('‚úÖ Quick hyperlink check passed')
"

echo "‚úÖ Documentation quality checks completed"
'''

    # Write the hook file
    git_dir = Path('.git')
    if not git_dir.exists():
        print("‚ùå Not in a git repository")
        return False
    
    hooks_dir = git_dir / 'hooks'
    hooks_dir.mkdir(exist_ok=True)
    
    hook_file = hooks_dir / 'pre-commit'
    
    with open(hook_file, 'w') as f:
        f.write(hook_content)
    
    # Make the hook executable
    current_mode = hook_file.stat().st_mode
    hook_file.chmod(current_mode | stat.S_IEXEC)
    
    print(f"‚úÖ Created pre-commit hook: {hook_file}")
    return True


def setup_commit_msg_hook():
    """Create a commit-msg hook to ensure commit message quality."""
    
    hook_content = '''#!/bin/bash
# Commit message hook for documentation commits
# Auto-generated by setup_git_hooks.py

commit_msg_file=$1
commit_msg=$(cat $commit_msg_file)

# Check if this is a documentation-related commit
if echo "$commit_msg" | grep -qi "doc\\|markdown\\|readme\\|guide"; then
    # Add documentation tag if not present
    if ! echo "$commit_msg" | grep -qi "^docs:"; then
        # Prepend "docs: " to the commit message
        echo "docs: $commit_msg" > $commit_msg_file
        echo "‚úÖ Added 'docs:' prefix to commit message"
    fi
fi

# Basic commit message validation
if [ ${#commit_msg} -lt 10 ]; then
    echo "‚ùå Commit message too short (minimum 10 characters)"
    exit 1
fi

if [ ${#commit_msg} -gt 72 ]; then
    echo "‚ö†Ô∏è  Commit message is long (over 72 characters). Consider a shorter summary."
fi
'''

    git_dir = Path('.git')
    hooks_dir = git_dir / 'hooks'
    hook_file = hooks_dir / 'commit-msg'
    
    with open(hook_file, 'w') as f:
        f.write(hook_content)
    
    # Make the hook executable
    current_mode = hook_file.stat().st_mode
    hook_file.chmod(current_mode | stat.S_IEXEC)
    
    print(f"‚úÖ Created commit-msg hook: {hook_file}")
    return True


def main():
    """Main setup function."""
    print("üöÄ Setting up Git hooks for documentation quality...")
    
    success = True
    
    if create_pre_commit_hook():
        print("‚úÖ Pre-commit hook installed")
    else:
        print("‚ùå Failed to install pre-commit hook")
        success = False
    
    if setup_commit_msg_hook():
        print("‚úÖ Commit-msg hook installed")
    else:
        print("‚ùå Failed to install commit-msg hook")
        success = False
    
    if success:
        print("\nüéâ Git hooks setup complete!")
        print("\nNext steps:")
        print("1. Install markdownlint: npm install -g markdownlint-cli")
        print("2. Install Vale: https://vale.sh/docs/vale-cli/installation/")
        print("3. Test with: git commit (hooks will run automatically)")
        print("4. Manual quality check: python scripts/quality_automation.py")
    else:
        print("\n‚ùå Git hooks setup failed")
    
    return success


if __name__ == "__main__":
    import sys
    sys.exit(0 if main() else 1)