# Git Automation Template for Development Progress Tracking
# Addresses the issue of accumulated uncommitted files during development

name: "Automated Development Progress Tracking"
description: "Automatically handles git operations after tasks to prevent uncommitted file accumulation"
category: "automation"
priority: "high"
trigger: "task_completion"

parameters:
  save_frequency:
    type: "enum"
    options: ["immediate", "after_each_task", "hourly", "end_of_session"]
    default: "after_each_task"
    description: "How often to save progress"
  
  commit_style:
    type: "enum" 
    options: ["descriptive", "simple", "automated"]
    default: "automated"
    description: "Style of commit messages to generate"
  
  backup_strategy:
    type: "enum"
    options: ["backup_branch", "main_branch", "feature_branch"]
    default: "backup_branch"
    description: "Where to push automated commits"
  
  file_selection:
    type: "enum"
    options: ["all_changes", "task_related", "selective"]
    default: "selective"
    description: "Which files to include in automated commits"

tasks:
  - name: "Check Repository Status"
    type: "git_status"
    specialist: "git_automation"
    description: "Check for uncommitted changes"
    outputs:
      - "changed_files_count"
      - "staged_files_count" 
      - "untracked_files_count"
    
  - name: "Analyze Changes"
    type: "change_analysis"
    specialist: "git_automation" 
    depends_on: ["Check Repository Status"]
    description: "Determine which changes are task-related"
    parameters:
      analysis_mode: "{{ file_selection }}"
    outputs:
      - "files_to_stage"
      - "commit_message_summary"
    
  - name: "Stage Relevant Files"
    type: "git_add"
    specialist: "git_automation"
    depends_on: ["Analyze Changes"]
    description: "Stage files for commit"
    parameters:
      files: "{{ files_to_stage }}"
      selective: true
    
  - name: "Generate Commit Message"
    type: "commit_message_generation"
    specialist: "git_automation"
    depends_on: ["Analyze Changes"]
    description: "Create informative commit message"
    parameters:
      style: "{{ commit_style }}"
      summary: "{{ commit_message_summary }}"
      task_context: "{{ parent_task.description }}"
    outputs:
      - "commit_message"
    
  - name: "Create Progress Commit"
    type: "git_commit"
    specialist: "git_automation"
    depends_on: ["Stage Relevant Files", "Generate Commit Message"]
    description: "Commit staged changes"
    parameters:
      message: "{{ commit_message }}"
      allow_empty: false
    
  - name: "Push to Backup Branch"
    type: "git_push"
    specialist: "git_automation"
    depends_on: ["Create Progress Commit"]
    description: "Push commits to remote for backup"
    parameters:
      branch: "{{ backup_strategy == 'backup_branch' ? 'backup-' + timestamp : current_branch }}"
      create_branch: "{{ backup_strategy == 'backup_branch' }}"
      frequency: "{{ save_frequency }}"
    conditions:
      - "changed_files_count > 0"

# Example usage scenarios:
usage_examples:
  
  # Scenario 1: Immediate progress saving (like the user's current situation)
  immediate_progress:
    parameters:
      save_frequency: "immediate"
      commit_style: "automated"
      backup_strategy: "backup_branch"
      file_selection: "all_changes"
    description: "Saves all changes immediately after any task completion"
    
  # Scenario 2: Smart selective commits
  selective_commits:
    parameters:
      save_frequency: "after_each_task"
      commit_style: "descriptive"
      backup_strategy: "feature_branch"
      file_selection: "task_related"
    description: "Only commits files related to the completed task with descriptive messages"
    
  # Scenario 3: Hourly backup commits
  hourly_backup:
    parameters:
      save_frequency: "hourly"
      commit_style: "simple"
      backup_strategy: "backup_branch"
      file_selection: "all_changes"
    description: "Creates backup commits every hour with all accumulated changes"

# Implementation in 2.0.0:
implementation_notes:
  priority: "P1 - High Value"
  complexity: "Medium"
  dependencies:
    - "Generic Task Model (for task context)"
    - "Template System (for template instantiation)"
    - "Git integration specialist"
  
  estimated_effort: "1-2 days"
  testing_requirements:
    - "Test with various git repository states"
    - "Validate commit message quality"
    - "Test backup branch creation and management"
    - "Verify selective file staging works correctly"
    
# Prevents the exact issue the user experienced:
problem_solved:
  issue: "Hundreds of uncommitted files accumulating during development sessions"
  solution: "Automatic git operations after each task completion"
  benefits:
    - "Never lose work due to uncommitted changes"
    - "Automatic backup to remote branches"
    - "Clear commit history showing development progress"
    - "Reduces cognitive load of manual git management"
    - "Enables focus on development rather than git housekeeping"